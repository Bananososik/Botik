from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from bot_token import bot_token, api_id, api_hash
from logging_utils import save_message, save_media
from mining_game import MiningGame
import os
from pyrogram import filters

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
game = MiningGame()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@app.on_message(filters.command("menu"))
async def menu(client, message):
    keyboard = ReplyKeyboardMarkup([
        [
            KeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
            KeyboardButton("üéØ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")
        ],
        [
            KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
            KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        ],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")]
    ], 
    resize_keyboard=True)
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@app.on_message(filters.command("start"))
async def start(client, message):
    main_keyboard = ReplyKeyboardMarkup([
        ["üéÆ –ò–≥—Ä—ã", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"],
        ["üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ], resize_keyboard=True)
    
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_keyboard
    )
    save_message(username, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", is_bot=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.text & ~filters.command(["start", "menu", "game", "shop"]))
async def handle_text(client, message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    save_message(username, message.text)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    if message.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω":
        await message.reply_text(game.get_shop_text(user_id))
    elif message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await message.reply_text(game.get_balance(user_id))
    elif message.text == "‚õè –ú–æ–∏ —Ñ–µ—Ä–º—ã":
        await message.reply_text(game.get_farms_status(user_id))
    elif message.text == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é":
        main_keyboard = ReplyKeyboardMarkup([
            ["üéÆ –ò–≥—Ä—ã", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"],
            ["üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ], resize_keyboard=True)
        await message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)
    elif message.text == "üéÆ –ò–≥—Ä—ã":
        game_keyboard = game.get_game_keyboard()
        await message.reply_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=game_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@app.on_message(filters.photo)
async def handle_photo(client, message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        
        if not os.path.exists("temp"):
            os.makedirs("temp")
        
        photo = message.photo
        temp_file = f"temp/{photo.file_id}.jpg"
        
        await message.download(file_name=temp_file)
        
        if os.path.exists(temp_file):
            with open(temp_file, "rb") as f:
                file_data = f.read()
                save_media(username, file_data, "photo")
            
            os.remove(temp_file)
            save_message(username, "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            await message.reply("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            print(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
@app.on_message(filters.sticker)
async def handle_sticker(client, message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        
        if not os.path.exists("temp"):
            os.makedirs("temp")
        
        file_size = message.sticker.file_size
        file_size_kb = file_size / 1024
        file_ext = ".webm" if file_size_kb > 100 else ".webp"
        
        print(f"–†–∞–∑–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞: {file_size_kb:.2f} KB")
        print(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext}")
        
        temp_file = f"temp/{message.sticker.file_id}{file_ext}"
        
        await message.download(file_name=temp_file)
        
        if os.path.exists(temp_file):
            with open(temp_file, "rb") as f:
                file_data = f.read()
                save_media(username, file_data, "sticker", file_ext)
            
            os.remove(temp_file)
            await message.reply(f"üéØ –°—Ç–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—Ä–∞–∑–º–µ—Ä: {file_size_kb:.2f} KB)")
            save_message(username, f"üéØ –°—Ç–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—Ä–∞–∑–º–µ—Ä: {file_size_kb:.2f} KB)")
            print(f"–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        if 'temp_file' in locals() and os.path.exists(temp_file):
            os.remove(temp_file)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
@app.on_message(filters.command("game"))
async def game_menu(client, message):
    keyboard = game.get_game_keyboard()
    await message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é!", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@app.on_message(filters.command("shop"))
async def shop_command(client, message):
    args = message.text.split()
    if len(args) == 1:
        await message.reply_text(game.get_shop_text(message.from_user.id))
    elif len(args) == 2:
        try:
            farm_id = int(args[1])
            result = game.buy_farm(message.from_user.id, farm_id)
            await message.reply_text(result)
        except ValueError:
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop <–Ω–æ–º–µ—Ä —Ñ–µ—Ä–º—ã>")

def start_mining_processes():
    if os.path.exists("Users"):
        for user_dir in os.listdir("Users"):
            try:
                user_id = int(user_dir)
                user_data = game.load_user_data(user_id)
                for farm_id in user_data.get("farms", {}):
                    game.start_mining(user_id, int(farm_id))
            except ValueError:
                continue
            except Exception as e:
                print(f"Error starting mining for user {user_dir}: {e}")

# –ó–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ buy –Ω–∞ —ç—Ç–æ—Ç:
@app.on_message(filters.regex(r"/buy_\d+"))
async def handle_buy_command(client, message):
    try:
        command = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–µ—Ä–º—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        farm_id = int(command.split('_')[1])
        user_id = message.from_user.id
        
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É ID: {farm_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")  # –û—Ç–ª–∞–¥–∫–∞
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É
        result = game.buy_farm(user_id, farm_id)
        await message.reply_text(result)
        
        # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω
        if "—É—Å–ø–µ—à–Ω–æ" in result.lower():
            await message.reply_text(game.get_shop_text(user_id))
            
    except (ValueError, IndexError) as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")  # –û—Ç–ª–∞–¥–∫–∞
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ñ–µ—Ä–º—ã")

# –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Command –≤–º–µ—Å—Ç–æ regex
@app.on_message(filters.command(["buy"]) & filters.regex(r"_\d+"))
async def handle_buy_command_alt(client, message):
    await handle_buy_command(client, message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("Bot started!")
    start_mining_processes()
    app.run()