# main.py
from pyrogram import Client, filters
from bot_token import bot_token, api_id, api_hash
from logging_utils import save_message, save_media
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

user_states = {}

@app.on_message(filters.command("menu"))
async def menu(client, message):
    keyboard = ReplyKeyboardMarkup([
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥
        [
            KeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
            KeyboardButton("üéØ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")
        ],
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥
        [
            KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
            KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        ],
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")]
    ], 
    resize_keyboard=True,
    one_time_keyboard=False)
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboard
    )

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@app.on_message(filters.text & ~filters.command(["start", "menu"]))  # —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
async def handle_menu_buttons(client, message):
    if message.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ":
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    
    elif message.text == "üéØ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä":
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä")
    
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏")
    
    elif message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await message.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    
    elif message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å":
        await message.reply("–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω")

@app.on_message(filters.command("start"))
async def start(client, message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    user_states[user_id] = 'waiting_for_chromosomes'
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ö—Ä–æ–º–æ—Å–æ–º: ")
    save_message(username, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ö—Ä–æ–º–æ—Å–æ–º: ", is_bot=True)

@app.on_message(filters.text & ~filters.command("start"))
async def handle_message(client, message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    save_message(username, message.text)
    if user_states.get(user_id) == 'waiting_for_chromosomes':
        if message.text == "46":
            await message.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —á–µ–ª–æ–≤–µ–∫!")
            save_message(username, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —á–µ–ª–æ–≤–µ–∫!", is_bot=True)
        else:
            await message.reply("–í—ã –¥–∞—É–Ω!")
            save_message(username, "–í—ã –¥–∞—É–Ω!", is_bot=True)
        user_states[user_id] = None

@app.on_message(filters.photo)
async def handle_photo(client, message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        
        if not os.path.exists("temp"):
            os.makedirs("temp")
        
        # Changed this part - directly use message.photo
        photo = message.photo
        temp_file = f"temp/{photo.file_id}.jpg"
        
        # Download using file_id
        await message.download(file_name=temp_file)
        
        if os.path.exists(temp_file):
            with open(temp_file, "rb") as f:
                file_data = f.read()
                save_media(username, file_data, "photo")
            
            os.remove(temp_file)
            save_message(username, "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")

@app.on_message(filters.sticker)
async def handle_sticker(client, message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or str(user_id)
        
        if not os.path.exists("temp"):
            os.makedirs("temp")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –±–∞–π—Ç–∞—Ö)
        file_size = message.sticker.file_size
        file_size_kb = file_size / 1024
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
        file_ext = ".webm" if file_size_kb > 100 else ".webp"
        
        print(f"–†–∞–∑–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞: {file_size_kb:.2f} KB")
        print(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext}")
        
        temp_file = f"temp/{message.sticker.file_id}{file_ext}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä
        await message.download(file_name=temp_file)
        
        if os.path.exists(temp_file):
            with open(temp_file, "rb") as f:
                file_data = f.read()
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é save_media
                save_media(username, file_data, "sticker", file_ext)
            
            os.remove(temp_file)
            save_message(username, f"üéØ –°—Ç–∏–∫–µ—Ä –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—Ä–∞–∑–º–µ—Ä: {file_size_kb:.2f} KB)")
            print(f"–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        if 'temp_file' in locals() and os.path.exists(temp_file):
            os.remove(temp_file)

from pyrogram import Client, filters
from mining_game import MiningGame

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
game = MiningGame()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º
@app.on_message(filters.command("game"))
async def game_menu(client, message):
    keyboard = game.get_game_keyboard()
    await message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é!", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ–µ—Ä–º
@app.on_message(filters.command("shop"))
async def shop_command(client, message):
    args = message.text.split()
    if len(args) == 1:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–µ—Ä–º
        await message.reply_text(game.get_shop_text(message.from_user.id))
    elif len(args) == 2:
        try:
            farm_id = int(args[1])
            result = game.buy_farm(message.from_user.id, farm_id)
            await message.reply_text(result)
        except ValueError:
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /shop <–Ω–æ–º–µ—Ä —Ñ–µ—Ä–º—ã>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
@app.on_message(filters.text & filters.private)
async def handle_text(client, message):
    if message.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω":
        await message.reply_text(game.get_shop_text(message.from_user.id))
    elif message.text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await message.reply_text(game.get_balance(message.from_user.id))
    elif message.text == "‚õè –ú–æ–∏ —Ñ–µ—Ä–º—ã":
        await message.reply_text(game.get_farms_status(message.from_user.id))
    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞...
    elif message.text == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é":
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = types.ReplyKeyboardMarkup(
            [
                ["üéÆ –ò–≥—Ä—ã", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"],  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
                ["üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            ],
            resize_keyboard=True
        )
        await message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∏–≥—Ä—ã
@app.on_message(filters.regex("^üéÆ –ò–≥—Ä—ã$"))
async def games_menu(client, message):
    game_keyboard = game.get_game_keyboard()
    await message.reply_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=game_keyboard)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –º–∞–π–Ω–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@app.on_start()
async def start_mining_processes():
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Users
    if os.path.exists("Users"):
        for user_dir in os.listdir("Users"):
            try:
                user_id = int(user_dir)
                user_data = game.load_user_data(user_id)
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–µ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for farm_id in user_data.get("farms", {}):
                    game.start_mining(user_id, int(farm_id))
            except ValueError:
                continue
            except Exception as e:
                print(f"Error starting mining for user {user_dir}: {e}")    

print("Bot started!")
app.run()